"use strict";var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));Object.defineProperty(exports, "__esModule", { value: true });exports["default"] =







function (doc, options) {
  var changedPathes = {};

  // eslint-disable-next-line no-undef
  return new Proxy(doc, {
    get: function get(target, property) {
      if (property === '__changedPathes') {
        return _.chain(changedPathes).
        keys().
        filter(function (key) {
          return changedPathes[key];
        }).
        value();
      }
      if (property === '__clearChangedPathes') {
        return function () {
          changedPathes = {};
        };
      }
      return target[property];
    },
    set: function set(target, key, value, receiver) {
      if (options.populatedPaths.indexOf(key) > -1) {
        var changed = JSON.stringify(target[key]) !== JSON.stringify(value);
        changedPathes[key] = changed;
      }
      if (options.set !== false)
      target[key] = value;
    },
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, name) {
      return Object.getOwnPropertyDescriptor(target, name);
    },
    ownKeys: function ownKeys(target) {
      return Object.getOwnPropertyNames(target);
    },
    defineProperty: function defineProperty(target, name, propertyDescriptor) {
      return Object.defineProperty(target, name, propertyDescriptor);
    },
    deleteProperty: function deleteProperty(target, name) {
      return delete target[name];
    },
    preventExtensions: function preventExtensions(target) {
      return Object.preventExtensions(target);
    },
    has: function has(target, name) {
      return name in target;
    } });

};var _ejson = require("ejson");var EJSON = (0, _interopRequireDefault2["default"])(_ejson)["default"];var _underscore = require("underscore");var _ = (0, _interopRequireDefault2["default"])(_underscore)["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qb3B1bGF0ZVByb3h5LmpzIl0sIm5hbWVzIjpbImRvYyIsIm9wdGlvbnMiLCJjaGFuZ2VkUGF0aGVzIiwiUHJveHkiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wZXJ0eSIsIl8iLCJjaGFpbiIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJ2YWx1ZSIsInNldCIsInJlY2VpdmVyIiwicG9wdWxhdGVkUGF0aHMiLCJpbmRleE9mIiwiY2hhbmdlZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJuYW1lIiwiT2JqZWN0Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3BlcnR5RGVzY3JpcHRvciIsImRlbGV0ZVByb3BlcnR5IiwicHJldmVudEV4dGVuc2lvbnMiLCJoYXMiLCJFSlNPTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFRZSxVQUFTQSxHQUFULEVBQWFDLE9BQWIsRUFBcUI7QUFDaEMsTUFBSUMsYUFBYSxHQUFHLEVBQXBCOztBQUVBO0FBQ0EsU0FBTyxJQUFJQyxLQUFKLENBQVVILEdBQVYsRUFBYztBQUNqQkksSUFBQUEsR0FBRyxFQUFFLGFBQVNDLE1BQVQsRUFBaUJDLFFBQWpCLEVBQTJCO0FBQzVCLFVBQUdBLFFBQVEsS0FBRyxpQkFBZCxFQUFnQztBQUM1QixlQUFPQyxDQUFDLENBQUNDLEtBQUYsQ0FBUU4sYUFBUjtBQUNOTyxRQUFBQSxJQURNO0FBRU5DLFFBQUFBLE1BRk0sQ0FFQyxVQUFDQyxHQUFELEVBQU87QUFDWCxpQkFBT1QsYUFBYSxDQUFDUyxHQUFELENBQXBCO0FBQ0gsU0FKTTtBQUtOQyxRQUFBQSxLQUxNLEVBQVA7QUFNSDtBQUNELFVBQUdOLFFBQVEsS0FBRyxzQkFBZCxFQUFxQztBQUNqQyxlQUFPLFlBQVU7QUFDYkosVUFBQUEsYUFBYSxHQUFHLEVBQWhCO0FBQ0gsU0FGRDtBQUdIO0FBQ0QsYUFBT0csTUFBTSxDQUFDQyxRQUFELENBQWI7QUFDSCxLQWhCZ0I7QUFpQmpCTyxJQUFBQSxHQUFHLEVBQUUsYUFBVVIsTUFBVixFQUFrQk0sR0FBbEIsRUFBdUJDLEtBQXZCLEVBQThCRSxRQUE5QixFQUF3QztBQUN6QyxVQUFHYixPQUFPLENBQUNjLGNBQVIsQ0FBdUJDLE9BQXZCLENBQStCTCxHQUEvQixJQUFvQyxDQUFDLENBQXhDLEVBQTBDO0FBQ3RDLFlBQUlNLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVkLE1BQU0sQ0FBQ00sR0FBRCxDQUFyQixNQUFnQ08sSUFBSSxDQUFDQyxTQUFMLENBQWVQLEtBQWYsQ0FBOUM7QUFDQVYsUUFBQUEsYUFBYSxDQUFDUyxHQUFELENBQWIsR0FBcUJNLE9BQXJCO0FBQ0g7QUFDRCxVQUFHaEIsT0FBTyxDQUFDWSxHQUFSLEtBQWMsS0FBakI7QUFDSVIsTUFBQUEsTUFBTSxDQUFDTSxHQUFELENBQU4sR0FBY0MsS0FBZDtBQUNQLEtBeEJnQjtBQXlCakJRLElBQUFBLHdCQXpCaUIsb0NBeUJRZixNQXpCUixFQXlCZ0JnQixJQXpCaEIsRUF5QnFCO0FBQ2xDLGFBQU9DLE1BQU0sQ0FBQ0Ysd0JBQVAsQ0FBZ0NmLE1BQWhDLEVBQXdDZ0IsSUFBeEMsQ0FBUDtBQUNILEtBM0JnQjtBQTRCakJFLElBQUFBLE9BNUJpQixtQkE0QlRsQixNQTVCUyxFQTRCRjtBQUNYLGFBQU9pQixNQUFNLENBQUNFLG1CQUFQLENBQTJCbkIsTUFBM0IsQ0FBUDtBQUNILEtBOUJnQjtBQStCakJvQixJQUFBQSxjQS9CaUIsMEJBK0JGcEIsTUEvQkUsRUErQk1nQixJQS9CTixFQStCWUssa0JBL0JaLEVBK0IrQjtBQUM1QyxhQUFPSixNQUFNLENBQUNHLGNBQVAsQ0FBc0JwQixNQUF0QixFQUE2QmdCLElBQTdCLEVBQWtDSyxrQkFBbEMsQ0FBUDtBQUNILEtBakNnQjtBQWtDakJDLElBQUFBLGNBbENpQiwwQkFrQ0Z0QixNQWxDRSxFQWtDTWdCLElBbENOLEVBa0NXO0FBQ3hCLGFBQU8sT0FBT2hCLE1BQU0sQ0FBQ2dCLElBQUQsQ0FBcEI7QUFDSCxLQXBDZ0I7QUFxQ2pCTyxJQUFBQSxpQkFyQ2lCLDZCQXFDQ3ZCLE1BckNELEVBcUNRO0FBQ3JCLGFBQU9pQixNQUFNLENBQUNNLGlCQUFQLENBQXlCdkIsTUFBekIsQ0FBUDtBQUNILEtBdkNnQjtBQXdDakJ3QixJQUFBQSxHQXhDaUIsZUF3Q2J4QixNQXhDYSxFQXdDTGdCLElBeENLLEVBd0NBO0FBQ2IsYUFBT0EsSUFBSSxJQUFJaEIsTUFBZjtBQUNILEtBMUNnQixFQUFkLENBQVA7O0FBNENILEMsQ0F4REQsOEIsSUFBT3lCLEssOERBQ1Asd0MsSUFBT3ZCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRUpTT04gZnJvbSAnZWpzb24nO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbi8qKlxuICogQG5hbWUgUG9wdWxhdGVQcm94eU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gcG9wdWxhdGVkUGF0aHNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2V0XG4gKiovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb2Msb3B0aW9ucyl7XG4gICAgbGV0IGNoYW5nZWRQYXRoZXMgPSB7fTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgUHJveHkoZG9jLHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbih0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICBpZihwcm9wZXJ0eT09PSdfX2NoYW5nZWRQYXRoZXMnKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5jaGFpbihjaGFuZ2VkUGF0aGVzKVxuICAgICAgICAgICAgICAgIC5rZXlzKClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChrZXkpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2VkUGF0aGVzW2tleV07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHByb3BlcnR5PT09J19fY2xlYXJDaGFuZ2VkUGF0aGVzJyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWRQYXRoZXMgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgICAgICAgaWYob3B0aW9ucy5wb3B1bGF0ZWRQYXRocy5pbmRleE9mKGtleSk+LTEpe1xuICAgICAgICAgICAgICAgIGxldCBjaGFuZ2VkID0gSlNPTi5zdHJpbmdpZnkodGFyZ2V0W2tleV0pICE9PSBKU09OLnN0cmluZ2lmeSh2YWx1ZSApO1xuICAgICAgICAgICAgICAgIGNoYW5nZWRQYXRoZXNba2V5XSA9IGNoYW5nZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihvcHRpb25zLnNldCE9PWZhbHNlKVxuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBuYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgb3duS2V5cyh0YXJnZXQpe1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwgcHJvcGVydHlEZXNjcmlwdG9yKXtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LG5hbWUscHJvcGVydHlEZXNjcmlwdG9yKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBuYW1lKXtcbiAgICAgICAgICAgIHJldHVybiBkZWxldGUgdGFyZ2V0W25hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpe1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICBoYXModGFyZ2V0LCBuYW1lKXtcbiAgICAgICAgICAgIHJldHVybiBuYW1lIGluIHRhcmdldDtcbiAgICAgICAgfVxuICAgIH0pXG59Il19