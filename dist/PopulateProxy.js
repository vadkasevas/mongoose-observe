"use strict";var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));Object.defineProperty(exports, "__esModule", { value: true });exports["default"] =







function (doc, options) {
  var changedPathes = {};

  // eslint-disable-next-line no-undef
  return new Proxy(doc, {
    get: function get(target, property) {
      if (property === '__changedPathes') {
        return _.chain(changedPathes).
        keys().
        filter(function (key) {
          return changedPathes[key];
        }).
        value();
      }
      if (property === '__clearChangedPathes') {
        return function () {
          changedPathes = {};
        };
      }
      return target[property];
    },
    set: function set(target, key, value, receiver) {
      if (options.populatedPaths.indexOf(key) > -1) {
        var changed = JSON.stringify(target[key]) !== JSON.stringify(value);
        changedPathes[key] = changed;
      }
      if (options.set !== false)
      target[key] = value;
    },
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, name) {
      return Object.getOwnPropertyDescriptor(target, name);
    },
    ownKeys: function ownKeys(target) {
      return Object.getOwnPropertyNames(target);
    },
    defineProperty: function defineProperty(target, name, propertyDescriptor) {
      return Object.defineProperty(target, name, propertyDescriptor);
    },
    deleteProperty: function deleteProperty(target, name) {
      return delete target[name];
    },
    preventExtensions: function preventExtensions(target) {
      return Object.preventExtensions(target);
    },
    has: function has(target, name) {
      return name in target;
    }
  });
};var _ejson = require("ejson");var EJSON = (0, _interopRequireDefault2["default"])(_ejson)["default"];var _underscore = require("underscore");var _ = (0, _interopRequireDefault2["default"])(_underscore)["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb2MiLCJvcHRpb25zIiwiY2hhbmdlZFBhdGhlcyIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwicHJvcGVydHkiLCJfIiwiY2hhaW4iLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwidmFsdWUiLCJzZXQiLCJyZWNlaXZlciIsInBvcHVsYXRlZFBhdGhzIiwiaW5kZXhPZiIsImNoYW5nZWQiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibmFtZSIsIk9iamVjdCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZGVmaW5lUHJvcGVydHkiLCJwcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWxldGVQcm9wZXJ0eSIsInByZXZlbnRFeHRlbnNpb25zIiwiaGFzIiwiX2Vqc29uIiwicmVxdWlyZSIsIkVKU09OIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIiLCJfdW5kZXJzY29yZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9Qb3B1bGF0ZVByb3h5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFSlNPTiBmcm9tICdlanNvbic7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuLyoqXG4gKiBAbmFtZSBQb3B1bGF0ZVByb3h5T3B0aW9uc1xuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBwb3B1bGF0ZWRQYXRoc1xuICogQHByb3BlcnR5IHtib29sZWFufSBzZXRcbiAqKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRvYyxvcHRpb25zKXtcbiAgICBsZXQgY2hhbmdlZFBhdGhlcyA9IHt9O1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBQcm94eShkb2Mse1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIGlmKHByb3BlcnR5PT09J19fY2hhbmdlZFBhdGhlcycpe1xuICAgICAgICAgICAgICAgIHJldHVybiBfLmNoYWluKGNoYW5nZWRQYXRoZXMpXG4gICAgICAgICAgICAgICAgLmtleXMoKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZWRQYXRoZXNba2V5XTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYocHJvcGVydHk9PT0nX19jbGVhckNoYW5nZWRQYXRoZXMnKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZFBhdGhlcyA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcGVydHldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZihvcHRpb25zLnBvcHVsYXRlZFBhdGhzLmluZGV4T2Yoa2V5KT4tMSl7XG4gICAgICAgICAgICAgICAgbGV0IGNoYW5nZWQgPSBKU09OLnN0cmluZ2lmeSh0YXJnZXRba2V5XSkgIT09IEpTT04uc3RyaW5naWZ5KHZhbHVlICk7XG4gICAgICAgICAgICAgICAgY2hhbmdlZFBhdGhlc1trZXldID0gY2hhbmdlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG9wdGlvbnMuc2V0IT09ZmFsc2UpXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbmFtZSl7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBvd25LZXlzKHRhcmdldCl7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCBwcm9wZXJ0eURlc2NyaXB0b3Ipe1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsbmFtZSxwcm9wZXJ0eURlc2NyaXB0b3IpO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZSB0YXJnZXRbbmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhcyh0YXJnZXQsIG5hbWUpe1xuICAgICAgICAgICAgcmV0dXJuIG5hbWUgaW4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgfSlcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBUWUsVUFBU0EsR0FBRyxFQUFDQyxPQUFPLEVBQUM7RUFDaEMsSUFBSUMsYUFBYSxHQUFHLENBQUMsQ0FBQzs7RUFFdEI7RUFDQSxPQUFPLElBQUlDLEtBQUssQ0FBQ0gsR0FBRyxFQUFDO0lBQ2pCSSxHQUFHLEVBQUUsU0FBQUEsSUFBU0MsTUFBTSxFQUFFQyxRQUFRLEVBQUU7TUFDNUIsSUFBR0EsUUFBUSxLQUFHLGlCQUFpQixFQUFDO1FBQzVCLE9BQU9DLENBQUMsQ0FBQ0MsS0FBSyxDQUFDTixhQUFhLENBQUM7UUFDNUJPLElBQUksQ0FBQyxDQUFDO1FBQ05DLE1BQU0sQ0FBQyxVQUFDQyxHQUFHLEVBQUc7VUFDWCxPQUFPVCxhQUFhLENBQUNTLEdBQUcsQ0FBQztRQUM3QixDQUFDLENBQUM7UUFDREMsS0FBSyxDQUFDLENBQUM7TUFDWjtNQUNBLElBQUdOLFFBQVEsS0FBRyxzQkFBc0IsRUFBQztRQUNqQyxPQUFPLFlBQVU7VUFDYkosYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN0QixDQUFDO01BQ0w7TUFDQSxPQUFPRyxNQUFNLENBQUNDLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBQ0RPLEdBQUcsRUFBRSxTQUFBQSxJQUFVUixNQUFNLEVBQUVNLEdBQUcsRUFBRUMsS0FBSyxFQUFFRSxRQUFRLEVBQUU7TUFDekMsSUFBR2IsT0FBTyxDQUFDYyxjQUFjLENBQUNDLE9BQU8sQ0FBQ0wsR0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUM7UUFDdEMsSUFBSU0sT0FBTyxHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ2QsTUFBTSxDQUFDTSxHQUFHLENBQUMsQ0FBQyxLQUFLTyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1AsS0FBTSxDQUFDO1FBQ3BFVixhQUFhLENBQUNTLEdBQUcsQ0FBQyxHQUFHTSxPQUFPO01BQ2hDO01BQ0EsSUFBR2hCLE9BQU8sQ0FBQ1ksR0FBRyxLQUFHLEtBQUs7TUFDbEJSLE1BQU0sQ0FBQ00sR0FBRyxDQUFDLEdBQUdDLEtBQUs7SUFDM0IsQ0FBQztJQUNEUSx3QkFBd0IsV0FBQUEseUJBQUNmLE1BQU0sRUFBRWdCLElBQUksRUFBQztNQUNsQyxPQUFPQyxNQUFNLENBQUNGLHdCQUF3QixDQUFDZixNQUFNLEVBQUVnQixJQUFJLENBQUM7SUFDeEQsQ0FBQztJQUNERSxPQUFPLFdBQUFBLFFBQUNsQixNQUFNLEVBQUM7TUFDWCxPQUFPaUIsTUFBTSxDQUFDRSxtQkFBbUIsQ0FBQ25CLE1BQU0sQ0FBQztJQUM3QyxDQUFDO0lBQ0RvQixjQUFjLFdBQUFBLGVBQUNwQixNQUFNLEVBQUVnQixJQUFJLEVBQUVLLGtCQUFrQixFQUFDO01BQzVDLE9BQU9KLE1BQU0sQ0FBQ0csY0FBYyxDQUFDcEIsTUFBTSxFQUFDZ0IsSUFBSSxFQUFDSyxrQkFBa0IsQ0FBQztJQUNoRSxDQUFDO0lBQ0RDLGNBQWMsV0FBQUEsZUFBQ3RCLE1BQU0sRUFBRWdCLElBQUksRUFBQztNQUN4QixPQUFPLE9BQU9oQixNQUFNLENBQUNnQixJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUNETyxpQkFBaUIsV0FBQUEsa0JBQUN2QixNQUFNLEVBQUM7TUFDckIsT0FBT2lCLE1BQU0sQ0FBQ00saUJBQWlCLENBQUN2QixNQUFNLENBQUM7SUFDM0MsQ0FBQztJQUNEd0IsR0FBRyxXQUFBQSxJQUFDeEIsTUFBTSxFQUFFZ0IsSUFBSSxFQUFDO01BQ2IsT0FBT0EsSUFBSSxJQUFJaEIsTUFBTTtJQUN6QjtFQUNKLENBQUMsQ0FBQztBQUNOLENBQUMsQ0F4REQsSUFBQXlCLE1BQUEsR0FBQUMsT0FBQSxVQUEwQixJQUFuQkMsS0FBSyxPQUFBQyx1QkFBQSxhQUFBSCxNQUFBLGFBQ1osSUFBQUksV0FBQSxHQUFBSCxPQUFBLGVBQTJCLElBQXBCeEIsQ0FBQyxPQUFBMEIsdUJBQUEsYUFBQUMsV0FBQSJ9