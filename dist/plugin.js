"use strict";var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));Object.defineProperty(exports, "__esModule", { value: true });var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");var _asyncToGenerator = (0, _interopRequireDefault2["default"])(_asyncToGenerator2)["default"];exports["default"] =
































































observeChangesPlugin;var _regenerator = require("@babel/runtime/regenerator");var _regeneratorRuntime = (0, _interopRequireDefault2["default"])(_regenerator)["default"];var _ObserveLogs = require("./ObserveLogs");var ObserveLogs = (0, _interopRequireDefault2["default"])(_ObserveLogs)["default"];var _ObserveCursor = require("./ObserveCursor");var ObserveCursor = (0, _interopRequireDefault2["default"])(_ObserveCursor)["default"];var _mongoose = require("mongoose");var Query = _mongoose.Query;var _ejson = require("ejson");var EJSON = (0, _interopRequireDefault2["default"])(_ejson)["default"];var _emitter = require("./emitter");var emitter = (0, _interopRequireDefault2["default"])(_emitter)["default"];var _ObserveCursorDeep = require("./ObserveCursorDeep");var ObserveCursorDeep = (0, _interopRequireDefault2["default"])(_ObserveCursorDeep)["default"];var mongoose = require('mongoose');var moduleMongoose = require.cache[require.resolve('mongoose')];var bson = moduleMongoose.require('bson');var mongodb = moduleMongoose.require('mongodb');var isReady = false;emitter.on('ready', function () {isReady = true;});emitter.on('notready', function () {isReady = false;});function waitReady() {return _waitReady.apply(this, arguments);}function _waitReady() {_waitReady = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {return _regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) switch (_context5.prev = _context5.next) {case 0:if (!isReady) {_context5.next = 2;break;}return _context5.abrupt("return", Promise.resolve());case 2:return _context5.abrupt("return", new Promise(function (resolve) {emitter.once('ready', resolve);}));case 3:case "end":return _context5.stop();}}, _callee5);}));return _waitReady.apply(this, arguments);}var BsonObjectId = bson.ObjectID;var MongodbObjectId = mongodb.ObjectId; /**
 * @returns {ObserveCursor}
 * */Query.prototype.observeChanges = function (handlers, options) {return new ObserveCursor(this, options).observeChanges(handlers);}; /**
 * @returns {ObserveCursor}
 * */Query.prototype.observeDeepChanges = function (handlers, options) {return new ObserveCursorDeep(this, options).observeChanges(handlers);};mongoose.ObjectId.prototype.toJSONValue = BsonObjectId.prototype.toJSONValue = MongodbObjectId.prototype.toJSONValue = function () {return this.toString();};MongodbObjectId.prototype.typeName = mongoose.ObjectId.prototype.typeName = BsonObjectId.prototype.typeName = function () {return 'ObjectID';};EJSON.addType('ObjectID', function fromJSONValue(json) {return json;});function collectionName(ctx) {var result = null;if (ctx instanceof mongoose.Model) {result = ctx.collection.name;} else if (ctx instanceof mongoose.Query) {result = ctx.mongooseCollection.name;}return result;}function observeChangesPlugin(schema, options) {/*schema.pre('save',function(){
      //console.log(this);
      return Promise.resolve();
  });*/schema.post('save', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {var rawDoc;return _regeneratorRuntime.wrap(function _callee$(_context) {while (1) switch (_context.prev = _context.next) {case 0:_context.next = 2;return waitReady();case 2:rawDoc = this.toObject({ getters: true });
              rawDoc = EJSON.clone(rawDoc);
              new ObserveLogs({
                type: 'save',
                collectionName: collectionName(this),
                arguments: [rawDoc],
                state: {
                  isNew: this.isNew
                },
                date: new Date()
              }).save();case 5:case "end":return _context.stop();}}, _callee, this);}))
  );

  schema.post(/^remove|Remove/, { query: true, document: true }, /*#__PURE__*/function () {var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(result) {var condition;return _regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (
              waitReady());case 2:
            //let rawDoc = this.toObject({ getters: false });
            //rawDoc = EJSON.clone(rawDoc);
            condition = null;
            if (result instanceof mongoose.Model) {
              condition = EJSON.clone({ _id: result._id });
            } else if (this instanceof mongoose.Query && result.deletedCount > 0) {
              condition = EJSON.clone(this._conditions);
            }

            if (condition) {
              new ObserveLogs({
                type: 'remove',
                collectionName: collectionName(this),
                arguments: [condition],
                state: {},
                date: new Date()
              }).save();
            }case 5:case "end":return _context2.stop();}}, _callee2, this);}));return function (_x) {return _ref2.apply(this, arguments);};}()
  );

  schema.post(/^update|Update/, { query: true, document: true }, /*#__PURE__*/function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(result) {var condition;return _regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) switch (_context3.prev = _context3.next) {case 0:_context3.next = 2;return (

              waitReady());case 2:
            condition = null;
            if (result instanceof mongoose.Model) {
              condition = EJSON.clone({ _id: result._id });
            } else if (this instanceof mongoose.Query && result.nModified > 0) {
              condition = EJSON.clone(this._conditions);
            }
            if (condition) {
              new ObserveLogs({
                type: 'update',
                collectionName: collectionName(this),
                arguments: [condition],
                state: {},
                date: new Date()
              }).save();
            }case 5:case "end":return _context3.stop();}}, _callee3, this);}));return function (_x2) {return _ref3.apply(this, arguments);};}()
  );

  schema.post(/^delete|Delete/, { query: true, document: true }, /*#__PURE__*/function () {var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(result) {var condition;return _regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) switch (_context4.prev = _context4.next) {case 0:_context4.next = 2;return (

              waitReady());case 2:
            condition = null;
            if (result instanceof mongoose.Model) {
              condition = EJSON.clone({ _id: result._id });
            } else if (this instanceof mongoose.Query && result.deletedCount > 0) {
              condition = EJSON.clone(this._conditions);
            }

            if (condition) {
              new ObserveLogs({
                type: 'remove',
                collectionName: collectionName(this),
                arguments: [condition],
                state: {},
                date: new Date()
              }).save();
            }case 5:case "end":return _context4.stop();}}, _callee4, this);}));return function (_x3) {return _ref4.apply(this, arguments);};}()
  );


}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,